// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fulltextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Use environment variable for Neon DB connection string
}

model Course {
  id          String    @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  isPublished Boolean   @default(false)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Image     Image?

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  data      Bytes
  mimeType  String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  video Video?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Video {
  id        String   @id @default(uuid())
  filename  String
  data      Bytes
  mimeType  String
  chapterId String   @unique
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  filename  String
  data      Bytes
  mimeType  String
  courseId  String   @unique
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Event {
  id     String   @id @default(uuid())
  title  String
  start  DateTime
  end    DateTime
  allDay Boolean
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  userId    String   
  sender    String   
  message   String
  timestamp DateTime @default(now())
}